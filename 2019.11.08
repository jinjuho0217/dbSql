--조인복습
--RDBMS 특성상 데이터 중복을 최대한 배제한 설계를 한다.
-- emp테이블에는 직원의 정보가 존재, 해당 직원의 소속부서정보는 
-- 부서번호만 갖고 있고, 부서번호를 통해 dept 테이블과 조인을 통해
-- 해당부서의 정보를 가져올 수 있다.

-- 직원번호, 직원이름,직원의 소속 부서번호, 부서이름
--  어디에 있는지 ? emp, dept
SELECT emp.empno, emp.ename, emp.deptno, dname
FROM emp, dept
WHERE emp.deptno = dept.deptno;

--부서번호, 부서명, 해당부서의 인원수
-- count(col) : col값이 존재하면1, null : 0
--                  행수가 궁금한 것이면 *
select emp.deptno, dname, count(empno) cnt
from emp join dept on(emp.deptno = dept.deptno)
group by emp.deptno, dname;


-- total row : 14
select count(*), count(empno), count(mgr), count(comm)
from emp;
---------실행결과
14	14	13	3
---------

-- OUTER JOIN : 조인에 실패해도 기준이 되는 테이블의 데이터는 조회결과가 나오도록하는 조인 형태
-- LEFT OUTER JOIN : JOIN KEYWORD 왼쪽에 위치한 테이블이 조회 기준이 되도록 하는 형태
-- RIGHT OUTER JOIN : JOIN KEYWORD 오른쪽에 위치한 테이블이 조회 기준이 되도록 하는 형태
-- FULL OUTER JOIN : LEFT OUTER JOIN + RIGHT  OUTER JOIN - 중복제거

-- 직원정보와, 해당 직원의 관리자 정보 OUTER JOIN
-- 직원 번호, 직원이름, 관리자 번호, 관리자 이름

SELECT a.empno, a.ename, a.mgr, b.ename
FROM emp a LEFT OUTER JOIN emp b ON(a.mgr = b.empno); -- b.ename이 mgr 이 되어있음, join에 실패한 부분도 나옴

SELECT a.empno, a.ename, a.mgr, b.ename
FROM emp a JOIN emp b ON(a.mgr = b.empno);  -- 그냥 join에는 join에 실패한 부분이 나오지 않음


--oracle outer join(left, right만 존재  fullouter는 지원하지 않음)
SELECT a.empno, a.ename, a.mgr, b.ename
FROM emp a, emp b
WHERE a.mgr = b.empno(+); -- 데이터가 없는 부분에 +를 한다.

SELECT a.empno, a.ename, a.mgr, b.ename
FROM emp a, emp b
WHERE a.mgr = b.empno; -- 그냥 join에는 join에 실패한 부분이 나오지 않음


-- ANSI LEFT OUTER
SELECT a.empno, a.ename, a.mgr, b.ename
FROM emp a LEFT OUTER JOIN  emp b ON(a.mgr = b.empno);

SELECT a.empno, a.ename, a.mgr, b.ename, b.deptno
FROM emp a LEFT OUTER JOIN  emp b 
ON(a.mgr = b.empno AND b.deptno =10); -- on 절 안에서 조건, 부서번호가 10번일때만 join

SELECT a.empno, a.ename, a.mgr, b.ename, b.deptno
FROM emp a LEFT OUTER JOIN  emp b 
ON(a.mgr = b.empno)
WHERE b.deptno =10; -- on절이 끝나고 조건이 실행

select ename, dname
form emp  dept;

-- oracle outer 문법에서는 outer 테이블이 된느 모든 컬럼에 (+)를 붙여줘야 outer joing이 정상적으로 동작한다.
select a.empno, a.ename, b.empno, b.ename
from emp a, emp b
where a.mgr = b.empno(+)
and b.deptno =10; -- outer가 되지 않음

select a.empno, a.ename, b.empno, b.ename
from emp a, emp b
where a.mgr = b.empno(+) -- outer가 됨, outer가 되는 모든 테이블에 (+)를 붙여야 한다.
and b.deptno(+) =10; -- outer가 됨, outer가 되는 모든 테이블에 (+)를 붙여야 한다.


--ANSI RIGHT OUTER
SELECT a.empno, a.ename, a.mgr, b.ename
FROM emp a RIGHT OUTER JOIN emp b ON (a.mgr = b.empno);

select *
from emp;

----♠실습 OUTER JOIN실습 1)

SELECT *
FROM buyprod;

SELECT buy_date, buyprod.buy_prod, prod_name, buy_qty
FROM buyprod join prod on(buyprod.buy_prod = prod.prod_id);

SELECT a.buy_date, a.buy_prod, b.prod_name, a.buy_qty
FROM buyprod a right outer join prod b on(a.buy_prod = b.prod_id and buy_date = to_date('05/01/25')); --buy_date = to_date('2005/01/25', 'YYYY/MM/DD')


----♠실습 OUTER JOIN실습 2)
SELECT  nvl(buy_date, '05/01/25') buy_date, a.buy_prod, b.prod_name, a.buy_qty
FROM buyprod a right outer join prod b on(a.buy_prod = b.prod_id and buy_date = to_date('05/01/25')); 



----♠실습 OUTER JOIN실습 3)
SELECT  nvl(buy_date, '05/01/25') buy_date, a.buy_prod, b.prod_name, nvl(buy_qty, 0) buy_qty
FROM buyprod a right outer join prod b on(a.buy_prod = b.prod_id and buy_date = to_date('05/01/25')); 


----♠실습 OUTER JOIN실습 4)
SELECT *
FROM cycle;

select *
from product;



----♠실습 OUTER JOIN실습 4)
select cycle.pid, pnm, cid, day, cnt
from cycle join product on(cycle.pid = product.pid);

select a.pid, b.pnm, a.cid, a.day, a.cnt
from cycle a left outer join product b on(a.pid = b.pid)
where cid ='1' and a.pid ='200';

SELECT b.pid, pnm, 1, nvl(a.day, 0) day, nvl(a.cnt, 0) cnt
FROM cycle a, product b
where a.pid(+) = b.pid
and a.cid(+) =1;

----♠실습 OUTER JOIN실습 5)
select a.pid, b.pid, customer.cid
from 
    (SELECT b.pid, pnm, 1, nvl(a.day, 0) day, nvl(a.cnt, 0) cnt
    FROM cycle a, product b
    where a.pid(+) = b.pid
    and a.cid(+) =1) d  join customer on(d.pid = customer.cid);

select *
from customer;

select a.pid, a.pnm, a.cid, c.cnm, a.day, a.cnt
from 
    (SELECT b.pid, pnm, 1, nvl(a.day, 0) day, nvl(a.cnt, 0) cnt
    FROM cycle a, product b
    where a.pid(+) = b.pid
    and a.cid(+) =1) a, customer c
where a.cid = c.cid;



--  cross join 
-- 두 테이블의 행수를 곱한 결과만큼의 결과
--WHERE절을 나열하지 않는다.
--♠실습 CROSS JOIN실습 1)

SELECT cid, cnm, pid, pnm
FROM customer cross join product;

--  subquery : main쿼리에 속하는 부분 쿼리
-- 사용되는 위치 :
--SELECT - scalar subquery(하나의 행과, 하나의 컬럼만 조회된느 쿼리이어야 한다.)
--FROM - inline view
--WHERE - subquery

--scalar subquery : 하나의 행, 하나의 컬럼
SELECT empno, ename, sysdate now/*현재의 날짜*/
FROM emp;

SELECT empno, ename, (select sysdate from dual) now
FROM emp;

select deptno -- SMITH DEPTNO 20
from emp
where ename = 'SMITH';

select *
from emp
where deptno = '20'; -- 20 이라는 결과가 위에서 나왔으니깐 아래에 넣어주어도 같은 값이 나온다.

----------------------------------------실행결과
7369	SMITH	    CLERK	    7902	80/12/17	800		20
7566	JONES	    MANAGER	7839	81/04/02	2975		20
7788	SCOTT	ANALYST	    7566	82/12/09	3000		20
7876	ADAMS	CLERK	    7788	83/01/12	1100		20
7902	FORD    	ANALYST	    7566	81/12/03	3000		20
------------------------------------------



select *
from emp
where deptno = (select deptno -- SMITH DEPTNO 20
from emp
where ename = 'SMITH');
----------------------------------------실행결과
7369	SMITH	    CLERK	    7902	80/12/17	800		20
7566	JONES	    MANAGER	7839	81/04/02	2975		20
7788	SCOTT	ANALYST	    7566	82/12/09	3000		20
7876	ADAMS	CLERK	    7788	83/01/12	1100		20
7902	FORD    	ANALYST	    7566	81/12/03	3000		20
------------------------------------------

--♠실습 서브 쿼리 실습 1)
SELECT SAL -- 직원의 평균급여
FROM EMP;


SELECT round(avg(SAL),0)
FROM EMP;
-----실행결과
2073
-------


select ename , sal -- 평균급여보다 높게 받는 직원
from emp
    where sal > (SELECT round(avg(SAL),0)
    FROM EMP
    );
    --------실행결과
    JONES   	2975
    BLAKE	2850    
    CLARK	2450
    SCOTT	3000
    KING	    5000
    FORD	    3000
-----------------

select count(*)  -- 평균급여보다 높게 받는 직원 수
from emp
    where sal > (SELECT round(avg(SAL),0)
    FROM EMP
    );
    ----실행결과
    6
    -----
    
select empno, ename, job, mgr, hiredate, sal, comm, deptno -- 평균급여보다 높은 급여를 받는 직원의 정보
from emp
where  sal > (SELECT round(avg(SAL),0)
    FROM EMP
    );
--------------------------------------------실행결과
7566	JONES   	MANAGER	7839	81/04/02    	2975		20
7698	BLAKE	MANAGER	7839	81/05/01	    2850		30
7782	CLARK	MANAGER	7839	81/06/09	    2450		10
7788	SCOTT	ANALYST	    7566	82/12/09	    3000		20
7839	KING	    PRESIDENT		    81/11/17	    5000		10
7902	FORD	    ANALYST	    7566	81/12/03	    3000		20
----------------------------------------------

select DEPTNO --SMITH 부서번호 20
from emp
where ename ='SMITH';

SELECT DEPTNO -- WARD 부서번호 30
FROM EMP
WHERE ENAME ='WARD';


SELECT *
from emp
where deptno in(
    (SELECT DEPTNO -- WARD 부서번호 30
    FROM EMP
    WHERE ENAME ='WARD'), (select DEPTNO --SMITH 부서번호 20
    from emp
    where ename ='SMITH'));
    
 -----------------------------------------------실행결과
7369	SMITH	    CLERK	    7902	80/12/17	    800		    20
7499	ALLEN	SALESMAN	7698	81/02/20	    1600	300	30
7521	WARD	    SALESMAN	7698	81/02/22	    1250	500	30
7566	JONES   	MANAGER	7839	81/04/02	    2975		    20
7654	MARTIN	SALESMAN	7698	81/09/28	    1250	1400	30
7698	BLAKE	MANAGER	7839	81/05/01	    2850		    30
7788	SCOTT	ANALYST	    7566	82/12/09	    3000		    20
7844	TURNER	SALESMAN	7698	81/09/08	    1500		    30
7876	ADAMS	CLERK	    7788	83/01/12	    1100		    20
7900	JAMES   	CLERK	    7698	81/12/03	    950		    30
7902	FORD	    ANALYST	    7566	81/12/03	    3000		    20
--------------------------------------------------